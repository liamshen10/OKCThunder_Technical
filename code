import pandas as pd
import numpy as np
import math

df = pd.read_csv("shots_data.csv")
data = np.array(df)

team_A = (data[:,0] == "Team A")
team_B = (data[:,0] == "Team B")


def distance(x,y):
    dist = math.sqrt((x - 0)**2 + (y - 0)**2)
    return dist

def efg(fgm, threepm, fga):
    efg = (fgm + (0.5 * threepm)) / fga
    return efg

TeamA_2PT = 0
TeamA_2PT_Makes = 0
TeamA_NonCorner3 = 0 
TeamA_NonCorner3_Makes = 0
TeamA_Corner3 = 0
TeamA_Corner3_Makes = 0

TeamB_2PT = 0
TeamB_2PT_Makes = 0
TeamB_NonCorner3 = 0
TeamB_NonCorner3_Makes = 0 
TeamB_Corner3 = 0
TeamB_Corner3_Makes = 0


for i in range(sum(team_A)):
    if(np.logical_and(distance(data[team_A][i, 1], data[team_A][i, 2]) > 23.75, abs(data[team_A][i, 2]) > 7.8)):
        TeamA_NonCorner3 += 1
    elif(np.logical_and(abs(data[team_A][i, 1]) > 22, abs(data[team_A][i, 2]) <= 7.8)):
        TeamA_Corner3 += 1
    else:
        TeamA_2PT += 1
        
        
for i in range(sum(team_A)):
    if(np.logical_and(np.logical_and(distance(data[team_A][i, 1], data[team_A][i, 2]) > 23.75, 
                                     abs(data[team_A][i, 2]) > 7.8), data[team_A][i, 3] == 1)):
        TeamA_NonCorner3_Makes += 1
    elif(np.logical_and(np.logical_and(abs(data[team_A][i, 1]) > 22, abs(data[team_A][i, 2]) <= 7.8), 
                        data[team_A][i, 3] == 1)):
        TeamA_Corner3_Makes += 1
    elif(np.logical_and(np.logical_and(np.logical_not(np.logical_and(distance(data[team_A][i, 1], 
                                                                              data[team_A][i, 2]) > 23.75, 
                                                                     abs(data[team_A][i, 2]) > 7.8)), 
                                       np.logical_not((np.logical_and(abs(data[team_A][i, 1]) > 22, 
                                                                      abs(data[team_A][i, 2]) <= 7.8)))), data[team_A][i, 3] == 1)):
        TeamA_2PT_Makes += 1

        
for i in range(sum(team_B)):
    if(np.logical_and(distance(data[team_B][i, 1], data[team_B][i, 2]) > 23.75, 
                      abs(data[team_B][i, 2]) > 7.8)):
        TeamB_NonCorner3 += 1
    elif(np.logical_and(abs(data[team_B][i, 1]) > 22, abs(data[team_B][i, 2]) <= 7.8)):
        TeamB_Corner3 += 1
    else:
        TeamB_2PT += 1

for i in range(sum(team_B)):
    if(np.logical_and(np.logical_and(distance(data[team_B][i, 1], data[team_B][i, 2]) > 23.75, 
                                     abs(data[team_B][i, 2]) > 7.8), data[team_B][i, 3] == 1)):
        TeamB_NonCorner3_Makes += 1
    elif(np.logical_and(np.logical_and(abs(data[team_B][i, 1]) > 22, abs(data[team_B][i, 2]) <= 7.8), 
                        data[team_B][i, 3] == 1)):
        TeamB_Corner3_Makes += 1
    elif(np.logical_and(np.logical_and(np.logical_not(np.logical_and(distance(data[team_B][i, 1], 
                                                                              data[team_B][i, 2]) > 23.75, 
                                                                     abs(data[team_B][i, 2]) > 7.8)), 
                                       np.logical_not((np.logical_and(abs(data[team_B][i, 1]) > 22, 
                                                                      abs(data[team_B][i, 2]) <= 7.8)))), data[team_B][i, 3] == 1)):
        TeamB_2PT_Makes += 1



        
        
print("Team A 2PT% Attemt:", (TeamA_2PT / sum(team_A)) * 100, "%")
print("Team A Corner 3PT% Attempts:", (TeamA_Corner3 / sum(team_A)) * 100, "%")
print("Team A Non Corner 3PT% Attemps:", (TeamA_NonCorner3 / sum(team_A)) * 100, "%\n")

print("Team A EFG% in 2PT", efg(TeamA_2PT_Makes, 0, TeamA_2PT) * 100, "%")
print("Team A EFG% in Corner 3PT Attempts:", efg(TeamA_Corner3_Makes, TeamA_Corner3_Makes, TeamA_Corner3) * 100, "%")
print("Team A EFG% in Non Corner 3PT Attempts:", efg(TeamA_NonCorner3_Makes, TeamA_NonCorner3_Makes, TeamA_NonCorner3) * 100, "%\n")

print("Team B 2PT% Attemt:", (TeamB_2PT / sum(team_B)) * 100, "%")
print("Team B Corner 3PT% Attempts:", (TeamB_Corner3 / sum(team_B)) * 100, "%")
print("Team B Non Corner 3PT% Attemps:", (TeamB_NonCorner3 / sum(team_B)) * 100, "%\n")

print("Team B EFG% in 2PT", efg(TeamB_2PT_Makes, 0, TeamB_2PT) * 100, "%")
print("Team B EFG% in Corner 3PT Attempts:", efg(TeamB_Corner3_Makes, TeamB_Corner3_Makes, TeamB_Corner3) * 100, "%")
print("Team B EFG% in Non Corner 3PT Attempts:", efg(TeamB_NonCorner3_Makes, TeamB_NonCorner3_Makes, TeamB_NonCorner3) * 100, "%")
